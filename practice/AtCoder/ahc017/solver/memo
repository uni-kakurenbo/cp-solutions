Solver 00:
- ランダム．

Solver 01:
- ランダム複数．
- もっともよいもの．

Solver 02:
- Solver 01 をリファクタリングのみ

Solver 03:
- 少しの点対をスコア算出のサンプルに.
- A* で高速化を図る．
- あまりうまくいかなかった．

Solver 04:
- サンプルを 10 個程度の点と，その点から行ける点との組に．
- かなりの高速化になった

Solver 05:
- サンプルを中心と円周上の 9 点に．

Solver 06:
- テスト用

Solver 07:
- 工事する辺の端点をサンプルに．
- 微妙なかんじ

Solver 08:
- Solver 05 をリファクタした．
- サンプル数を 5 つに．(中心, 円周 4 点)
- 初期化処理を最初のみにした．

Solver 09:
- 焼きなます．
- めちゃくちゃ上がった．

Solver 10:
- サンプルを 4 つに減らした．円周よりも少し内側．(伸びた)
- 近傍で変更する辺を進度に依らず 1 つにした．(伸びた)
- バグ修正 (ある日に工事する辺が 0 になると範囲外参照で死ぬ)

Solver 11:
- 近傍を~~追加~~変更．辺同士を交換．

Solver 12:
- 高速化
  - rollback を差分で．
  - highest 更新を progress >= 0.9 のみで
  - progress, temp の更新を 100, 10, 1 回のループごとに．

Solver 13:
- Dijkstra 高速化実験用

Solver 14:
- 高速化
  - 最初に初期状態の距離を求めなくてもよい

Solver 15:
- 実験用
- 時間を延ばしただけ

Solver 16 ~ 20:
- 実験用

Solver 22:
- 高速化 pragma 貼ってみた．ダメだった．
